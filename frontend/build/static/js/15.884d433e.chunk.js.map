{"version":3,"sources":["../../src/torusWalletAdapter.ts"],"names":["constructor","params","WALLET_ADAPTERS","TORUS_EVM","ADAPTER_NAMESPACES","EIP155","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","provider","init","rpcTarget","network","chainId","parseInt","host","blockExplorer","networkName","displayName","chainConfig","getChainConfig","showTorusButton","emit","ADAPTER_EVENTS","options","rehydrated","log","connect","this","WalletInitializationError","adapter","torusInstance","reconnected","error","WalletLoginError","disconnect","cleanup","getUserInfo","userInfo","setAdapterSettings"],"mappings":"i2BAgCM,E,kDAqBJA,aAA2C,0BAA/BC,MAA+B,uDAAF,GAAE,OACzC,eArBsBC,8BAAgBC,WAEUC,0CAAmBC,QAEhBC,+CAAiBD,QAE/BE,8BAAiBC,UAEnBC,gCAAeC,WAYT,mCAVN,MAUM,2HAJL,IAIK,iCAFtB,GAInB,qBAA0BT,mBAA1B,GACA,aAAkBA,cAAlB,GACA,gBAAqBA,iBAArB,GACA,cAAmBA,eAAnB,KALyC,E,0CAQvCU,WACE,qBAAgBF,IAAhB,WAA4C,KAAhD,cACS,mBAAP,SAEF,M,IAGEE,SAAQ,GACV,MAAM,UAAN,qB,yDAGIC,WAAI,GAAJA,8FAAgC,wFAI/B,KAAL,aAIO,EACsD,KAA3D,YAAM,EADD,EACC,UADD,EACC,gBADD,EACC,YAAuCC,EADxC,EACwCA,UAC7CC,EAAU,CAAEC,QAASC,SAAQ,EAAnB,IAA4CC,KAA5C,EAA6DC,gBAAeC,YAAaC,KAL9FC,KAAL,YAAmBC,YAAehB,IAAD,OAAjC,GADqB,EAEkB,KAAvC,YAAM,EAFe,EAEf,cAAiBc,EAFF,EAEEA,YACvBN,EAAU,CAAEC,QAAF,EAAcE,KAAd,UAA+BC,gBAAeC,YAAaC,IAKvE,mBAAqB,QAAU,KAA/B,oBAZIR,SAaE,6BACJW,iBAAiB,GACd,KAFC,gBAGJT,aAhBEF,UAkBJ,YAAcH,IAAd,MACKe,KAAL,KAAUC,IAAV,MAAgCvB,IAAhC,WAnBIU,UAsBEc,EAAJ,YAtBEd,wBAuBKe,KAAL,cAvBAf,UAwBM,KAAN,UAxBAA,0DA2BFgB,4DACA,UAAUH,IAAV,cA5BEb,0D,mHAgCAiB,uFACJ,mEAAAC,MAAA,KAAAA,MACK,KAAL,cAFID,sBAE2BE,aAAN,mCAFrBF,cAGJ,YAAcpB,IAAd,WACA,UAAUgB,IAAV,WAAqC,CAAEO,QAAS9B,IAAgBC,YAJ5D0B,kBAMI,yBAAyB,KAA/B,eANEA,YAOMd,EAAY,mBAApB,SAAQA,UACOC,cAAsBA,SAAU,iBAAF,QAA7C,IAREa,uBASME,uEAE4C,iBAF5CA,QAEwGhB,sBAF9GA,IATAc,eAcF,YAAcpB,IAAd,UACKwB,KAAL,gCACAH,KAAK,KAAKrB,IAAV,UAAoC,CAAEuB,QAAS9B,IAAX,UAAsCgC,YAAa,KAAKP,aAhB1FE,kBAiBK,KAAP,UAjBEA,wCAoBF,YAAcpB,IAAd,MACKkB,KAAL,cACA,UAAUlB,IAAV,cACM0B,yBAAyCC,oBAA/C,qCAvBEP,0D,qHA2BAQ,mGAAWX,EAAgC,gCAAEY,SAAS,GACtD,cAAgB7B,IAApB,UADI4B,sBACgDD,sBAAN,6BAD1CC,UAEC,KAAL,cAFIA,sBAE2BN,aAAN,mCAFrBM,uBAGE,mBAAN,SAHIA,OAICJ,KAAL,gCACIP,EAAJ,SACE,YAAcjB,IAAd,UACKwB,KAAL,oBAGA,YAAcxB,IAAd,MAGGkB,KAAL,cACA,UAAUF,IAAV,cAdIY,iD,sHAiBAE,uFACA,cAAgB9B,IAApB,UADI8B,sBACgDH,sBAAN,6BAD1CG,UAEC,KAAL,cAFIA,sBAE2BR,aAAN,mCAFrBQ,uBAGmB,+BAAvB,IAHIA,cAGEC,EAHFD,yBAIJ,GAJIA,gD,sFAONE,SAAkB,Q,GA3Hd","file":"static/js/15.884d433e.chunk.js","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Torus from '@toruslabs/torus-embed';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, getChainConfig, ADAPTER_EVENTS, log, WalletInitializationError, Web3AuthError, WalletLoginError } from '@web3auth/base';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass TorusWalletAdapter extends BaseAdapter {\n  constructor() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.TORUS_EVM);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"torusInstance\", null);\n\n    _defineProperty(this, \"torusWalletOptions\", void 0);\n\n    _defineProperty(this, \"initParams\", void 0);\n\n    _defineProperty(this, \"loginSettings\", {});\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.torusInstance) {\n      return this.torusInstance.provider;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set\n\n    let network;\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n      const {\n        blockExplorer,\n        displayName\n      } = this.chainConfig;\n      network = {\n        chainId: 1,\n        host: \"mainnet\",\n        blockExplorer,\n        networkName: displayName\n      };\n    } else {\n      const {\n        chainId,\n        blockExplorer,\n        displayName,\n        rpcTarget\n      } = this.chainConfig;\n      network = {\n        chainId: parseInt(chainId, 16),\n        host: rpcTarget,\n        blockExplorer,\n        networkName: displayName\n      };\n    }\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    await this.torusInstance.init(_objectSpread(_objectSpread({\n      showTorusButton: false\n    }, this.initParams), {}, {\n      network\n    }));\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_EVM);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with torus evm provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.TORUS_EVM\n    });\n\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      const {\n        chainId\n      } = this.torusInstance.provider;\n\n      if (chainId && parseInt(chainId) !== parseInt(this.chainConfig.chainId, 16)) {\n        throw WalletInitializationError.fromCode(5000, \"Not connected to correct chainId. Expected: \".concat(this.chainConfig.chainId, \", Current: \").concat(chainId));\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.TORUS_EVM,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_STATUS.ERRORED, error);\n      throw error instanceof Web3AuthError ? error : WalletLoginError.connectionError(\"Failed to login with torus wallet\");\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n    this.torusInstance.hideTorusButton();\n\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo(\"\");\n    return userInfo;\n  }\n\n  setAdapterSettings(_) {}\n\n}\n\nexport { TorusWalletAdapter };\n//# sourceMappingURL=torusEvmAdapter.esm.js.map\n"],"sourceRoot":""}